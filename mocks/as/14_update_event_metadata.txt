test("Can update event metadata", () => {
        let base: ethereum.Event = new NewGravatar();
        let newGravatarEvent = addMetadata(base);
        let UPDATED_LOG_TYPE = "updated_log_type";
        let UPDATED_ADDRESS = "0xB16081F360e3847006dB660bae1c6d1b2e17eC2A";
        let UPDATED_BLOCK_HASH = "0xC16081F360e3847006dB660bae1c6d1b2e17eC2A";
        let UPDATED_LOG_INDEX = 42;
        let UPDATED_PARAMS_FIRST_ELEMENT_NAME = "new_name";

        newGravatarEvent.logType = UPDATED_LOG_TYPE;
        newGravatarEvent.address = Address.fromString(UPDATED_ADDRESS);
        newGravatarEvent.block.hash = Bytes.fromHexString(
            UPDATED_BLOCK_HASH,
        ) as Bytes;
        newGravatarEvent.logIndex = BigInt.fromI32(UPDATED_LOG_INDEX);
        newGravatarEvent.parameters[0].name = UPDATED_PARAMS_FIRST_ELEMENT_NAME;

        // String
        assert.equals(ethereum.Value.fromString(UPDATED_LOG_TYPE), ethereum.Value.fromString(newGravatarEvent.logType));
        // Address
        assert.equals(ethereum.Value.fromAddress(Address.fromString(UPDATED_ADDRESS)), ethereum.Value.fromAddress(newGravatarEvent.address));
        // BigInt
        assert.equals(ethereum.Value.fromSignedBigInt(BigInt.fromI32(UPDATED_LOG_INDEX)), ethereum.Value.fromSignedBigInt(newGravatarEvent.logIndex));
        // Bytes & nested objects
        assert.equals(ethereum.Value.fromBytes(Bytes.fromHexString(UPDATED_BLOCK_HASH) as Bytes), ethereum.Value.fromBytes(newGravatarEvent.block.hash));
        // Array & nested objects
        assert.equals(ethereum.Value.fromString(UPDATED_PARAMS_FIRST_ELEMENT_NAME), ethereum.Value.fromString(newGravatarEvent.parameters[0].name));
    });